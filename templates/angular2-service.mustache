/* tslint:disable */
import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import {WebmsgService} from '../app/core/webmsg/webmsg.service';

import { {{#definitions}}{{name}}{{^last}}, {{/last}}{{/definitions}} } from './models';

/**
* Created with angular4-swagger-client-generator.
*/
@Injectable()
export class ApiClientService {

  constructor(private webMsgService:WebmsgService) {
  }
{{#tags}}
    /**
     * Service calls for {{&tag}}
     */
    public {{&name}} = {
    {{#methods}}
        /**
        {{#summaryLines}}
            * {{&.}}
        {{/summaryLines}}
        * Method {{&methodName}}
        {{#parameters}}
            {{^isSingleton}}* @param {{&camelCaseName}} The {{&description}}{{/isSingleton}}
        {{/parameters}}
        * @param showLoading boolean value indicating whether the app should show a loading overlay or not for this call
        * @param loadingWatcher number id indicating which element is watching the service call to display a localized overlay
        * @return The full HTTP response as Observable
        */
        {{&methodName}}: ({{#parameters}}{{&camelCaseName}}: {{typescriptType}}{{^last}}, {{/last}}{{/parameters}}{{#hasParameters}}, {{/hasParameters}}showLoading = true, loadingWatcher?: number): Observable<HttpResponse<{{&response}}>> => {
            let uri = `{{&backTickPath}}`;
            let headers = new HttpHeaders();
            if (showLoading) {
                headers = headers.set('loadingWatcher', (isNaN(loadingWatcher) ? 0 : loadingWatcher) + '');
            }
            let params = new HttpParams();
            {{#parameters}}
                {{#isQueryParameter}}
                    {{#isSingleton}}
                        params = params.set('{{&name}}', '{{&singleton}}' + '');
                    {{/isSingleton}}
                    {{^isSingleton}}
                        {{#isPatternType}}
                            Object.keys(parameters).forEach(function(parameterName) {
                            if (new RegExp('{{&pattern}}').test(parameterName)) {
                            params = params.set(parameterName, parameters[parameterName] + '');
                            }
                            });
                        {{/isPatternType}}
                        {{^isPatternType}}
                            if (typeof {{&camelCaseName}} !== 'undefined' && {{&camelCaseName}} !== null) {
                            {{#isArray}}
                                Object.keys({{&camelCaseName}}).map(value => {
                                params = params.set('{{&name}}', value + '');
                                });
                            {{/isArray}}
                            {{^isArray}}
                                params = params.set('{{&name}}', {{&camelCaseName}} + '');
                            {{/isArray}}
                            }
                        {{/isPatternType}}
                    {{/isSingleton}}
                {{/isQueryParameter}}
                {{#isHeaderParameter}}
                    {{#isSingleton}}
                        headers = headers.set('{{&name}}', '{{&singleton}}' + '');
                    {{/isSingleton}}
                    {{^isSingleton}}
                        if ({{&camelCaseName}}) {
                        {{#isArray}}
                            Object.keys({{&camelCaseName}}).map(value => {
                            headers = headers.set('{{&name}}', value + '');
                            });
                        {{/isArray}}
                        {{^isArray}}
                            headers = headers.set('{{&name}}', {{&camelCaseName}} + '');
                        {{/isArray}}
                        }
                    {{/isSingleton}}
                {{/isHeaderParameter}}
            {{/parameters}}
            return this.sendRequest<{{&response}}>('{{angular2httpMethod}}', uri, headers, params, {{#hasBodyParameters}}{{#parameters}}{{#isBodyParameter}}{{&camelCaseName}}{{/isBodyParameter}}{{/parameters}}{{/hasBodyParameters}}{{^hasBodyParameters}}null{{/hasBodyParameters}}).share();
        },

    {{/methods}}
    };
{{/tags}}

  private sendRequest<T>(method:string, uri:string, headers:HttpHeaders, params:HttpParams, body:any):Observable<HttpResponse<T>> {
    return this.webMsgService.createWebMsgObservable(method, uri, headers, params, body);
  }
}
